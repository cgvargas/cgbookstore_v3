# Generated by Django 5.0.3 on 2025-10-27 19:10

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0009_add_purchase_partner_fields'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BookSimilarity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('similarity_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('method', models.CharField(choices=[('content', 'Conteúdo'), ('collaborative', 'Colaborativo'), ('hybrid', 'Híbrido')], default='content', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('book_a', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='similarities_from', to='core.book')),
                ('book_b', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='similarities_to', to='core.book')),
            ],
            options={
                'verbose_name': 'Similaridade entre Livros',
                'verbose_name_plural': 'Similaridades entre Livros',
                'db_table': 'recommendations_similarity',
                'ordering': ['-similarity_score'],
                'indexes': [models.Index(fields=['book_a', '-similarity_score'], name='idx_similarity_book_a'), models.Index(fields=['book_b', '-similarity_score'], name='idx_similarity_book_b'), models.Index(fields=['method'], name='idx_similarity_method')],
                'unique_together': {('book_a', 'book_b', 'method')},
            },
        ),
        migrations.CreateModel(
            name='Recommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recommendation_type', models.CharField(choices=[('collaborative', 'Filtragem Colaborativa'), ('content', 'Baseado em Conteúdo'), ('hybrid', 'Sistema Híbrido'), ('ai', 'IA Premium (Gemini)'), ('trending', 'Em Alta'), ('popular', 'Popular')], max_length=20)),
                ('score', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('reason', models.TextField(blank=True, help_text='Por que esse livro foi recomendado')),
                ('is_clicked', models.BooleanField(default=False)),
                ('clicked_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to='core.book')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Recomendação',
                'verbose_name_plural': 'Recomendações',
                'db_table': 'recommendations_recommendation',
                'ordering': ['-score', '-created_at'],
                'indexes': [models.Index(fields=['user', '-score', 'expires_at'], name='idx_rec_user_score'), models.Index(fields=['book'], name='idx_rec_book'), models.Index(fields=['recommendation_type'], name='idx_rec_type'), models.Index(fields=['expires_at'], name='idx_rec_expires')],
            },
        ),
        migrations.CreateModel(
            name='UserBookInteraction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interaction_type', models.CharField(choices=[('view', 'Visualização'), ('click', 'Clique'), ('wishlist', 'Lista de Desejos'), ('reading', 'Lendo'), ('read', 'Lido'), ('completed', 'Finalizado'), ('review', 'Avaliado'), ('share', 'Compartilhado')], max_length=20)),
                ('rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('duration', models.IntegerField(default=0, help_text='Duração da interação em segundos')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_interactions', to='core.book')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='book_interactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Interação Usuário-Livro',
                'verbose_name_plural': 'Interações Usuário-Livro',
                'db_table': 'recommendations_interaction',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', '-created_at'], name='idx_interaction_user_date'), models.Index(fields=['book', '-created_at'], name='idx_interaction_book_date'), models.Index(fields=['interaction_type'], name='idx_interaction_type')],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('favorite_genres', models.JSONField(blank=True, default=list)),
                ('favorite_authors', models.JSONField(blank=True, default=list)),
                ('total_books_read', models.IntegerField(default=0)),
                ('total_pages_read', models.IntegerField(default=0)),
                ('avg_reading_time', models.FloatField(default=0.0, help_text='Tempo médio de leitura em minutos')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='recommendation_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Perfil de Usuário',
                'verbose_name_plural': 'Perfis de Usuários',
                'db_table': 'recommendations_userprofile',
                'indexes': [models.Index(fields=['user'], name='idx_userprofile_user')],
            },
        ),
    ]
