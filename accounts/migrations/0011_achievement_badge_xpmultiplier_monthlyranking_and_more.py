# Generated by Django 5.0.3 on 2025-10-24 12:54

import core.storage_backends
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0010_readingnotification_action_text_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nome √∫nico e descritivo', max_length=100, unique=True, verbose_name='Nome da Conquista')),
                ('slug', models.SlugField(help_text='Identificador √∫nico (gerado automaticamente)', max_length=120, unique=True, verbose_name='Slug')),
                ('description', models.TextField(help_text='Descri√ß√£o detalhada da conquista', max_length=300, verbose_name='Descri√ß√£o')),
                ('icon', models.CharField(default='üèÜ', help_text='Emoji ou c√≥digo FontAwesome', max_length=50, verbose_name='√çcone')),
                ('badge_image', models.ImageField(blank=True, help_text='Imagem visual da conquista (opcional)', null=True, storage=core.storage_backends.SupabaseMediaStorage(), upload_to='achievements/badges/', verbose_name='Imagem do Badge')),
                ('xp_reward', models.IntegerField(default=50, help_text='Quantidade de XP concedida ao completar', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)], verbose_name='Recompensa em XP')),
                ('category', models.CharField(choices=[('reading', 'üìñ Leitura'), ('progress', 'üìä Progresso'), ('social', 'üí¨ Social'), ('diversity', 'üåà Diversidade'), ('special', '‚≠ê Especial')], default='reading', max_length=20, verbose_name='Categoria')),
                ('difficulty_level', models.IntegerField(choices=[(1, 'üü¢ F√°cil'), (2, 'üü° M√©dio'), (3, 'üü† Dif√≠cil'), (4, 'üî¥ Muito Dif√≠cil'), (5, 'üü£ Lend√°rio')], default=2, verbose_name='Dificuldade')),
                ('requirements_json', models.JSONField(default=dict, help_text="\n        Estrutura: {\n            'type': 'books_read' | 'pages_read' | 'streak_days' | 'reviews_written' | 'categories_read',\n            'value': <n√∫mero>,\n            'condition': 'greater_or_equal' | 'equal' | 'less_or_equal'\n        }\n        ", verbose_name='Requisitos (JSON)')),
                ('is_active', models.BooleanField(default=True, help_text='Conquista dispon√≠vel para ser completada', verbose_name='Ativo')),
                ('display_order', models.IntegerField(default=0, help_text='Ordem na listagem (menor = primeiro)', verbose_name='Ordem de Exibi√ß√£o')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado Em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado Em')),
            ],
            options={
                'verbose_name': 'Conquista',
                'verbose_name_plural': 'Conquistas',
                'ordering': ['display_order', 'difficulty_level', 'name'],
                'indexes': [models.Index(fields=['category', 'is_active'], name='accounts_ac_categor_417a4d_idx'), models.Index(fields=['difficulty_level'], name='accounts_ac_difficu_a5d6f6_idx')],
            },
        ),
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nome √∫nico e descritivo', max_length=100, unique=True, verbose_name='Nome do Badge')),
                ('slug', models.SlugField(help_text='Identificador √∫nico (gerado automaticamente)', max_length=120, unique=True, verbose_name='Slug')),
                ('description', models.TextField(help_text='Descri√ß√£o curta do badge', max_length=200, verbose_name='Descri√ß√£o')),
                ('icon', models.CharField(default='üèÖ', help_text='Emoji ou c√≥digo FontAwesome', max_length=50, verbose_name='√çcone')),
                ('badge_image', models.ImageField(blank=True, help_text='Imagem visual do badge (recomendado 200x200px)', null=True, storage=core.storage_backends.SupabaseMediaStorage(), upload_to='badges/images/', verbose_name='Imagem do Badge')),
                ('rarity', models.CharField(choices=[('bronze', 'ü•â Bronze'), ('silver', 'ü•à Prata'), ('gold', 'ü•á Ouro'), ('platinum', 'üíé Platina'), ('diamond', 'üíç Diamante'), ('special', 'üåü Especial')], default='bronze', max_length=20, verbose_name='Raridade')),
                ('category', models.CharField(choices=[('reading', 'üìñ Leitura'), ('achievement', 'üèÜ Conquistas'), ('social', 'üí¨ Social'), ('time', '‚è∞ Tempo'), ('special_event', 'üéâ Evento Especial')], default='reading', max_length=20, verbose_name='Categoria')),
                ('requirements_json', models.JSONField(default=dict, help_text="\n        Estrutura flex√≠vel para diferentes tipos de requisitos.\n        Exemplos:\n        - {'achievements_count': 10}\n        - {'streak_days': 30}\n        - {'books_read_genre': 'terror', 'count': 5}\n        - {'ranking_position': 10, 'month': 'any'}\n        ", verbose_name='Requisitos (JSON)')),
                ('display_order', models.IntegerField(default=0, help_text='Ordem na listagem (menor = primeiro)', verbose_name='Ordem de Exibi√ß√£o')),
                ('is_active', models.BooleanField(default=True, help_text='Badge dispon√≠vel para ser conquistado', verbose_name='Ativo')),
                ('is_limited_edition', models.BooleanField(default=False, help_text='Badge dispon√≠vel apenas em per√≠odo limitado', verbose_name='Edi√ß√£o Limitada')),
                ('available_from', models.DateTimeField(blank=True, help_text='Data inicial de disponibilidade (opcional)', null=True, verbose_name='Dispon√≠vel Desde')),
                ('available_until', models.DateTimeField(blank=True, help_text='Data final de disponibilidade (opcional)', null=True, verbose_name='Dispon√≠vel At√©')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado Em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado Em')),
            ],
            options={
                'verbose_name': 'Badge',
                'verbose_name_plural': 'Badges',
                'ordering': ['display_order', 'rarity', 'name'],
                'indexes': [models.Index(fields=['rarity', 'is_active'], name='accounts_ba_rarity_b5ad2f_idx'), models.Index(fields=['category', 'is_active'], name='accounts_ba_categor_ac7c79_idx')],
            },
        ),
        migrations.CreateModel(
            name='XPMultiplier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nome descritivo do evento/promo√ß√£o', max_length=100, unique=True, verbose_name='Nome do Multiplicador')),
                ('description', models.TextField(blank=True, help_text='Descri√ß√£o detalhada do multiplicador', max_length=300, verbose_name='Descri√ß√£o')),
                ('multiplier_value', models.FloatField(default=1.5, help_text='Multiplicador de XP (1.5 = +50%, 2.0 = +100%, etc)', validators=[django.core.validators.MinValueValidator(1.0), django.core.validators.MaxValueValidator(10.0)], verbose_name='Valor do Multiplicador')),
                ('start_date', models.DateTimeField(help_text='Quando o multiplicador come√ßa a valer', verbose_name='Data de In√≠cio')),
                ('end_date', models.DateTimeField(help_text='Quando o multiplicador termina', verbose_name='Data de T√©rmino')),
                ('applies_to', models.CharField(choices=[('all', 'Todos os Usu√°rios'), ('premium', 'Apenas Premium'), ('free', 'Apenas Free')], default='all', help_text='Quem pode usar este multiplicador', max_length=20, verbose_name='Aplica-se a')),
                ('is_active', models.BooleanField(default=True, help_text='Multiplicador est√° ativo', verbose_name='Ativo')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado Em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado Em')),
            ],
            options={
                'verbose_name': 'Multiplicador de XP',
                'verbose_name_plural': 'Multiplicadores de XP',
                'ordering': ['-start_date'],
                'indexes': [models.Index(fields=['is_active', 'start_date', 'end_date'], name='accounts_xp_is_acti_5fdac5_idx'), models.Index(fields=['applies_to'], name='accounts_xp_applies_b12e45_idx')],
            },
        ),
        migrations.CreateModel(
            name='MonthlyRanking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('month', models.IntegerField(help_text='M√™s do ranking (1-12)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='M√™s')),
                ('year', models.IntegerField(help_text='Ano do ranking', verbose_name='Ano')),
                ('total_xp', models.IntegerField(default=0, help_text='XP ganho durante este m√™s', validators=[django.core.validators.MinValueValidator(0)], verbose_name='XP Total do M√™s')),
                ('books_read', models.IntegerField(default=0, help_text='Livros finalizados no m√™s', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Livros Lidos')),
                ('pages_read', models.IntegerField(default=0, help_text='Total de p√°ginas lidas no m√™s', validators=[django.core.validators.MinValueValidator(0)], verbose_name='P√°ginas Lidas')),
                ('reviews_written', models.IntegerField(default=0, help_text='Reviews publicadas no m√™s', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Reviews Escritas')),
                ('achievements_earned', models.IntegerField(default=0, help_text='Conquistas completadas no m√™s', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Conquistas Desbloqueadas')),
                ('consecutive_reading_days', models.IntegerField(default=0, help_text='Maior streak de dias de leitura no m√™s', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Dias Consecutivos de Leitura')),
                ('total_score', models.IntegerField(default=0, help_text='Pontua√ß√£o calculada para ranking', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Pontua√ß√£o Total')),
                ('rank_position', models.IntegerField(default=0, help_text='Posi√ß√£o atual no ranking mensal (0 = n√£o ranqueado)', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Posi√ß√£o no Ranking')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado Em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado Em')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='monthly_rankings', to=settings.AUTH_USER_MODEL, verbose_name='Usu√°rio')),
            ],
            options={
                'verbose_name': 'Ranking Mensal',
                'verbose_name_plural': 'Rankings Mensais',
                'ordering': ['year', 'month', 'rank_position'],
                'indexes': [models.Index(fields=['month', 'year', 'rank_position'], name='accounts_mo_month_ecce53_idx'), models.Index(fields=['total_score'], name='accounts_mo_total_s_2100aa_idx')],
                'unique_together': {('user', 'month', 'year')},
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('progress_percentage', models.IntegerField(default=0, help_text='Porcentagem de conclus√£o (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Progresso (%)')),
                ('is_completed', models.BooleanField(default=False, help_text='True se a conquista foi completada', verbose_name='Completada')),
                ('earned_at', models.DateTimeField(blank=True, help_text='Data/hora que completou a conquista', null=True, verbose_name='Conquistada Em')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado Em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado Em')),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_achievements', to='accounts.achievement', verbose_name='Conquista')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_achievements', to=settings.AUTH_USER_MODEL, verbose_name='Usu√°rio')),
            ],
            options={
                'verbose_name': 'Conquista do Usu√°rio',
                'verbose_name_plural': 'Conquistas dos Usu√°rios',
                'ordering': ['-earned_at', '-progress_percentage'],
                'indexes': [models.Index(fields=['user', 'is_completed'], name='accounts_us_user_id_fef049_idx'), models.Index(fields=['achievement', 'is_completed'], name='accounts_us_achieve_0f9987_idx')],
                'unique_together': {('user', 'achievement')},
            },
        ),
        migrations.CreateModel(
            name='UserBadge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_showcased', models.BooleanField(default=False, help_text='Badge ser√° exibido no perfil do usu√°rio', verbose_name='Exibir no Perfil')),
                ('showcase_order', models.IntegerField(default=0, help_text='Ordem no showcase (menor = primeiro)', verbose_name='Ordem de Exibi√ß√£o')),
                ('earned_at', models.DateTimeField(auto_now_add=True, verbose_name='Conquistado Em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado Em')),
                ('badge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_badges', to='accounts.badge', verbose_name='Badge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_badges', to=settings.AUTH_USER_MODEL, verbose_name='Usu√°rio')),
            ],
            options={
                'verbose_name': 'Badge do Usu√°rio',
                'verbose_name_plural': 'Badges dos Usu√°rios',
                'ordering': ['-earned_at'],
                'indexes': [models.Index(fields=['user', 'is_showcased'], name='accounts_us_user_id_6b32a0_idx'), models.Index(fields=['badge'], name='accounts_us_badge_i_b7f024_idx')],
                'unique_together': {('user', 'badge')},
            },
        ),
    ]
