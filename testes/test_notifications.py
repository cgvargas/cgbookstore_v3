"""
Script de Teste: Criar Notifica√ß√µes N√£o Lidas
CGBookStore v3

Objetivo: Criar notifica√ß√µes de teste com is_read=False
para validar o sistema de notifica√ß√µes
"""

import os
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cgbookstore.settings')
django.setup()

from accounts.models import ReadingNotification, SystemNotification
from django.contrib.auth import get_user_model
from datetime import datetime

User = get_user_model()

def diagnostico():
    """Exibe o estado atual das notifica√ß√µes"""
    print("=" * 60)
    print("DIAGN√ìSTICO DE NOTIFICA√á√ïES")
    print("=" * 60)

    users = User.objects.all()
    print(f"\nUsu√°rios no sistema: {users.count()}")

    for user in users:
        print(f"\n--- Usu√°rio: {user.username} ---")

        # Reading Notifications
        rn_total = ReadingNotification.objects.filter(user=user).count()
        rn_unread = ReadingNotification.objects.filter(user=user, is_read=False).count()
        rn_read = ReadingNotification.objects.filter(user=user, is_read=True).count()

        print(f"  üìö Reading Notifications:")
        print(f"     Total: {rn_total}")
        print(f"     N√£o lidas: {rn_unread}")
        print(f"     Lidas: {rn_read}")

        # System Notifications
        sn_total = SystemNotification.objects.filter(user=user).count()
        sn_unread = SystemNotification.objects.filter(user=user, is_read=False).count()
        sn_read = SystemNotification.objects.filter(user=user, is_read=True).count()

        print(f"  üîî System Notifications:")
        print(f"     Total: {sn_total}")
        print(f"     N√£o lidas: {sn_unread}")
        print(f"     Lidas: {sn_read}")

        print(f"  ‚ú® TOTAL N√ÉO LIDAS: {rn_unread + sn_unread}")

def marcar_todas_como_nao_lidas():
    """Marca todas as notifica√ß√µes existentes como N√ÉO LIDAS"""
    print("\n" + "=" * 60)
    print("MARCANDO TODAS AS NOTIFICA√á√ïES COMO N√ÉO LIDAS")
    print("=" * 60)

    users = User.objects.all()

    for user in users:
        # Atualizar Reading Notifications
        rn_count = ReadingNotification.objects.filter(user=user, is_read=True).update(is_read=False)
        print(f"\n‚úÖ {user.username}: {rn_count} Reading Notifications marcadas como n√£o lidas")

        # Atualizar System Notifications
        sn_count = SystemNotification.objects.filter(user=user, is_read=True).update(is_read=False)
        print(f"‚úÖ {user.username}: {sn_count} System Notifications marcadas como n√£o lidas")

def criar_notificacoes_teste():
    """Cria notifica√ß√µes de teste N√ÉO LIDAS"""
    print("\n" + "=" * 60)
    print("CRIANDO NOTIFICA√á√ïES DE TESTE")
    print("=" * 60)

    user = User.objects.first()

    if not user:
        print("‚ùå Nenhum usu√°rio encontrado! Crie um usu√°rio primeiro.")
        return

    print(f"\nCriando notifica√ß√µes para: {user.username}")

    # 1. Reading Notification - Progresso
    rn1 = ReadingNotification.objects.create(
        user=user,
        notification_type='progress',
        message='Voc√™ est√° progredindo! Continue lendo para alcan√ßar sua meta.',
        priority=2,
        is_read=False  # ‚Üê IMPORTANTE!
    )
    print(f"‚úÖ Criada: ReadingNotification (progress) - ID: {rn1.id}")

    # 2. Reading Notification - Deadline
    rn2 = ReadingNotification.objects.create(
        user=user,
        notification_type='deadline',
        message='Prazo se aproximando! Voc√™ tem 3 dias para terminar o livro.',
        priority=3,
        is_read=False  # ‚Üê IMPORTANTE!
    )
    print(f"‚úÖ Criada: ReadingNotification (deadline) - ID: {rn2.id}")

    # 3. System Notification - Atualiza√ß√£o
    sn1 = SystemNotification.objects.create(
        user=user,
        notification_type='system_update',
        message='Nova funcionalidade dispon√≠vel: Sistema de notifica√ß√µes v3.0!',
        priority=1,
        is_read=False  # ‚Üê IMPORTANTE!
    )
    print(f"‚úÖ Criada: SystemNotification (update) - ID: {sn1.id}")

    # 4. System Notification - Evento
    sn2 = SystemNotification.objects.create(
        user=user,
        notification_type='book_launch',
        message='Novo lan√ßamento: "O Guia Definitivo de Django" j√° est√° dispon√≠vel!',
        priority=2,
        is_read=False  # ‚Üê IMPORTANTE!
    )
    print(f"‚úÖ Criada: SystemNotification (launch) - ID: {sn2.id}")

    print(f"\n‚ú® Total criado: 4 notifica√ß√µes N√ÉO LIDAS")

def limpar_todas_notificacoes():
    """Remove TODAS as notifica√ß√µes (use com cuidado!)"""
    print("\n" + "=" * 60)
    print("‚ö†Ô∏è  LIMPANDO TODAS AS NOTIFICA√á√ïES")
    print("=" * 60)

    rn_count = ReadingNotification.objects.all().count()
    sn_count = SystemNotification.objects.all().count()

    resposta = input(f"\n‚ö†Ô∏è  Confirma exclus√£o de {rn_count + sn_count} notifica√ß√µes? (sim/n√£o): ")

    if resposta.lower() == 'sim':
        ReadingNotification.objects.all().delete()
        SystemNotification.objects.all().delete()
        print("‚úÖ Todas as notifica√ß√µes foram removidas!")
    else:
        print("‚ùå Opera√ß√£o cancelada.")

def menu():
    """Menu interativo"""
    while True:
        print("\n" + "=" * 60)
        print("MENU DE TESTES - NOTIFICA√á√ïES v3.0")
        print("=" * 60)
        print("1. Diagn√≥stico (ver estado atual)")
        print("2. Marcar todas como N√ÉO LIDAS")
        print("3. Criar 4 notifica√ß√µes de teste N√ÉO LIDAS")
        print("4. Limpar todas as notifica√ß√µes")
        print("5. Sair")
        print("=" * 60)

        opcao = input("\nEscolha uma op√ß√£o: ")

        if opcao == '1':
            diagnostico()
        elif opcao == '2':
            marcar_todas_como_nao_lidas()
            diagnostico()
        elif opcao == '3':
            criar_notificacoes_teste()
            diagnostico()
        elif opcao == '4':
            limpar_todas_notificacoes()
            diagnostico()
        elif opcao == '5':
            print("\nüëã At√© logo!")
            break
        else:
            print("\n‚ùå Op√ß√£o inv√°lida!")

if __name__ == '__main__':
    # Executar diagn√≥stico inicial
    diagnostico()

    # Exibir menu
    menu()